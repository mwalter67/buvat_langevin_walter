#Recherche meilleur taux d'élagations
cv.tree.rus=cv.tree(tree.rus,FUN=prune.misclass)
cv.tree.rus
par(mfrow=c(1,2))
plot(cv.tree.rus$size,cv.tree.rus$dev,type="b")
plot(cv.tree.rus$k,cv.tree.rus$dev,type="b")
which.min(cv.tree.rus$size)
#Meilleur pour 6 élagations
prune.rus=prune.misclass(tree.rus,best=6)
summary(prune.rus)
par(mfrow=c(1,1))
plot(prune.rus)
text(prune.rus,pretty=0)
tree.pred3=predict(prune.rus,newdata=test2,type="class")
table(tree.pred3,test2$Class)
mean(tree.pred3!=test2$Class)*100
glm_rus=glm(Class~V4+V10+V12+V14,data=resample,family=binomial)
glm_rus
#Matrice de confusion apprentissage
glm_pred_prob_t=predict(glm_rus,newdata=resample,type="response")
glm_pred_t=rep(0,nrow(resample))
glm_pred_t[glm_pred_prob_t<=.5]=0
glm_pred_t[glm_pred_prob_t>.5]=1
table(glm_pred_t,resample$Class)
mean(glm_pred_t!=resample$Class)*100
#Prédiction sur échantiillon de validation
glm_pred_prob=predict(glm_rus,newdata=test,type="response")
glm_pred=rep(0,nrow(test))
glm_pred[glm_pred_prob<=.5]=0
glm_pred[glm_pred_prob>.5]=1
glm_pred
table(glm_pred,test$Class)
Class.glm=as.factor(test$Class)
glm_pred=as.factor(glm_pred)
conf2=confusionMatrix(data=glm_pred,reference=Class.glm)
draw_confusion_matrix(conf2,"Matrice de confusion de la régression logistique (test)")
glm_pred2=as.numeric(glm_pred)
roc_glm=roc(test$Class,glm_pred2)
plot.roc(roc_glm, print.auc=T, col="red", main= "Courbe ROC sur l'échantillon de test (régression logistique)")
plot.roc(roc_glm, print.auc=T, col="red", main= "Courbe ROC sur l'échantillon de test (régression logistique)")
lines.roc(roc_tree, print.auc=T, col="green", main= "Courbe ROC sur l'échantillon de test (arbre de classification)")
plot.roc(roc_glm, print.auc=T, col="red", main= "Courbe ROC sur l'échantillon de test (régression logistique)")
lines.roc(roc_tree, col="green", main= "Courbe ROC sur l'échantillon de test (arbre de classification)")
roc(test$Class,glm_pred2)
roc(test$Class,glm_pred2, plot=TRUE)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, percent=TRUE, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree, col="green", main= "Courbe ROC sur l'échantillon de test (arbre de classification)")
plot.roc(roc_tree, col="green", main= "Courbe ROC sur l'échantillon de test (arbre de classification)")
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, percent=TRUE, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree, col="green", main= "Courbe ROC sur l'échantillon de test (arbre de classification)")
plot.roc(roc_glm, print.auc=T, col="red", main= "Courbe ROC sur l'échantillon de test (régression logistique)",add=T)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, percent=TRUE, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, percent=TRUE, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree, col="green", main= "Courbe ROC sur l'échantillon de test (arbre de classification)")
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10 )
pred_essai=predict(svm_resample, resample)
Class.f=as.factor(Class)
conf=confusionMatrix(data=pred_essai,reference=Class.f)
conf
draw_confusion_matrix <- function(cm,titre) {
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title(titre, cex.main=2)
# create the matrix
rect(150, 430, 240, 370, col='#3F97D0')
text(195, 435, 'Pas de Fraude', cex=1.2)
rect(250, 430, 340, 370, col='#F7AD50')
text(295, 435, 'Fraude', cex=1.2)
text(125, 370, 'Prédite', cex=1.3, srt=90, font=2)
text(245, 450, 'Observée', cex=1.3, font=2)
rect(150, 305, 240, 365, col='#F7AD50')
rect(250, 305, 340, 365, col='#3F97D0')
text(140, 400, 'Pas de fraude', cex=1.2, srt=90)
text(140, 335, 'Fraude', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "Statistiques importantes", xaxt='n', yaxt='n')
text(20, 60, "Sensitivité", cex=1.5, font=2)
text(20, 40, round(as.numeric(cm$byClass[1]), 3), cex=1.4)
text(40, 60, "Spécificité", cex=1.5, font=2)
text(40, 40, round(as.numeric(cm$byClass[2]), 3), cex=1.4)
text(60, 60, "Taux d'erreur", cex=1.5, font=2)
text(60, 40, 1-round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(80, 60, names(cm$overall[2]), cex=1.5, font=2)
text(80, 40, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, percent=TRUE, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree, col="green", main= "Courbe ROC sur l'échantillon de test (arbre de classification)")
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, percent=TRUE, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree, col="green", main= "Courbe ROC sur l'échantillon de test (arbre de classification)",add=T)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, percent=TRUE, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree, col="green", percent=T,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y=40)
plot.roc(roc_tree, percent=T,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y=40)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, percent=TRUE, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree, percent=T,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y=40)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y=40)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y=40)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y=40, percent=T)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y=40, percent=T)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T, print.auc.y=60)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y=40, percent=T)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, percent=T)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, percent=T, print.auc.y = 20)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y = 20)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y = 20)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T, print.auc.y =40)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc = T)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc.y=40)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc.y=40)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc.x=80)
roc(test$Class,glm_pred2, plot=TRUE, legacy.axes=T, xlab="Pourcentage faux positif", ylab="Pourcentage vrai positif", col="#377eb8", lwd=4, print.auc=T)
plot.roc(roc_tree,col="#4daf4a",lwd=4,add=T,print.auc.x=80)
roc_glm=roc(test$Class,glm_pred2)
roc_tree=roc(test2$Class2,tree.pred.roc)
ggroc(list(call_roc_name_1=roc_glm,call_roc_name2=roc_tree))
ggroc(list("ROC GLM"=roc_glm,call_roc_name2=roc_tree))
ggroc(list("ROC de la régression linéaire"=roc_glm,"ROC de l'arbre de classification"=roc_tree))
glm=glm(Class~.,family="binomial",data=resample)
glm
shiny::runApp('GitHub/buvat_langevin_walter')
roc_glm=roc(test$Class,glm_pred2)
roc_tree=roc(test2$Class2,tree.pred.roc)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
theme_minimal()+
labs(x="1-Spécificité",y="Sensitivité", linetype="Légende")+
scale_fill_discrete(name = "Titre")
roc_glm=roc(test$Class,glm_pred2, col="red")
roc_tree=roc(test2$Class2,tree.pred.roc, col="blue")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
theme_minimal()+
labs(x="1-Spécificité",y="Sensitivité", linetype="Légende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
ggtitle="titre essai"
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
ggtitle="titre essai"+
labs(x="1-Spécificité",y="Sensitivité", linetype="Légende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
ggtitle="titre essai"+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
ggtitle="titre essai"+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
legacy.axes=T)+
theme_classic()+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
legacy.axes=T)+
theme_classic()+
ggtitle("Titre")+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
legacy.axes=T)+
ggtitle("Titre")+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
roc_glm=roc(test$Class,glm_pred2, col="red")
roc_tree=roc(test2$Class2,tree.pred.roc, col="blue")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
labs(title="TItre",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
color="red",
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype","color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
roc_glm=roc(test$Class,glm_pred2, col="red",auc = T)
roc_tree=roc(test2$Class2,tree.pred.roc, col="blue")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype","color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
aes="color",
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype","color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("color"),
legacy.axes=T)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("color"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
color=c("red","blue"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
color=c("red"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
scale_fill_manual(values = c("blue","red"))
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
scale_fill_manual(values = c("blue","red"))
library(pROC)
data(aSAH)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6")
rocobj2 <- lines.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600")
testobj <- roc.test(rocobj1, rocobj2)
text(50, 50, labels=paste("p-value =", format.pval(testobj$p.value)), adj=c(0, .5))
legend("bottomright", legend=c("S100B", "NDKA"), col=c("#1c61b6", "#008600"), lwd=2)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- lines.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600")
rocobj2 <- lines.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",print.auc=T)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- lines.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",print.auc=T)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
library(pROC)
data(aSAH)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
testobj <- roc.test(rocobj1, rocobj2)
text(50, 50, labels=paste("p-value =", format.pval(testobj$p.value)), adj=c(0, .5))
legend("bottomright", legend=c("S100B", "NDKA"), col=c("#1c61b6", "#008600"), lwd=2)
oc
data(aSAH)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
rocobj2 <- plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("S100B", "NDKA"), col=c("#1c61b6", "#008600"), lwd=2)
plot.roc(roc-glm
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(roc-glm,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(roc_glm,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(roc_glm,main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
roc_glm=roc(test$Class,glm_pred2, col="red",auc = T)
roc_tree=roc(test2$Class2,tree.pred.roc, col="blue", auc=T)
plot.roc(roc_glm,main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(roc_glm,main="Courbe ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
warnings()
plot.roc(test$Class,glm_pred2,main="Courbe ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,tree.pred.roc, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(test$Class,glm_pred2,main="Courbe ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,tree.pred.roc, percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("Regression logistique", "Arbre de classification"), col=c("#1c61b6", "#008600"), lwd=2)
plot.roc(test$Class,glm_pred2,main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,tree.pred.roc, percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("Regression logistique", "Arbre de classification"), col=c("#1c61b6", "#008600"), lwd=2)
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
library(shiny)
library(ggplot2)
library(e1071)
library(data.table)
library(pROC)
library(caret)
test=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_test.csv",sep=',')
attach(test)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
glmpred=function(){
glm_rus=glm(Class~.,family="binomial",data=resample)
glm_pred_prob=predict(glm_rus,newdata=test,type="response")
glm_pred=rep(0,nrow(test))
glm_pred[glm_pred_prob<=.5]=0
glm_pred[glm_pred_prob>.5]=1
return(glm_pred)
}
glmpred
glmpred()
glm_pred
runApp('GitHub/buvat_langevin_walter')
library(shiny)
library(ggplot2)
library(e1071)
library(data.table)
library(pROC)
library(caret)
test=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_test.csv",sep=',')
attach(test)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10)
pred_essai=predict(svm_resample, newdata=test)
glm_rus=glm(Class~.,family="binomial",data=resample)
glm_pred_prob=predict(glm_rus,newdata=test,type="response")
glm_pred=rep(0,nrow(test))
glm_pred[glm_pred_prob<=.5]=0
glm_pred[glm_pred_prob>.5]=1
plot.roc(test$Class,pred_essai,main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test$Class,glm_pred, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(test$Class,as.numeric(pred_essai),main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test$Class,glm_pred, percent=TRUE, col="#008600",add=T, print.auc=T)
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10)
pred_essai=predict(svm_resample, newdata=test)
Class2=ifelse(Class==0,"0:No fraud","1:Fraud")
resample2=data.frame(resample,Class2)
resample2=resample2[,-31]
Class2=ifelse(test$Class==0,"0:No fraud", "1:Fraud")
test2=data.frame(test,Class2)
test2=test2[,-31]
tree.rus=tree(Class2~.,resample2)
set.seed(2501)
tree.pred=predict(tree.rus,test2,type="class")
plot.roc(test$Class,as.numeric(pred_essai),main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,tree_pred, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(test2$Class2,tree.pred, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(test2$Class2,as.numeric(tree.pred), percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("SVM optimal", "Arbre de classification"), col=c("#1c61b6", "#008600"), lwd=2)
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10)
pred_essai=predict(svm_resample, newdata=test)
glm_rus=glm(Class~.,family="binomial",data=resample)
glm_pred_prob=predict(glm_rus,newdata=test,type="response")
glm_pred=rep(0,nrow(test))
glm_pred[glm_pred_prob<=.5]=0
glm_pred[glm_pred_prob>.5]=1
plot.roc(test$Class,as.numeric(pred_essai),main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test$Class,glm_pred, percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("SVM optimal", "Regression logistique"), col=c("#1c61b6", "#008600"), lwd=2)
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10)
pred_essai=predict(svm_resample, newdata=test)
plot.roc(test$Class,as.numeric(pred_essai),main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,as.numeric(tree.pred), percent=TRUE, col="red",add=T, print.auc=T)
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
