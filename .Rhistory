help(predict)
install.packages("ISLR")#pour installer le package
library(ISLR) #pour charger le package
Smarket#pour ouvrir la table de données
head(Smarket)#pour avoir les 6 premières observations
names(Smarket)#pour avoir les noms des colonnes
dim(Smarket)#pour savoir la dimension du tableau (lignes x colonnes)
help(dim)#pour savoir à quoi sert une fonction
summary(Smarket)#donne les stats desc de toute les colonnes
cor(Smarket)#erreur car colonne 9 est une variable qualitative
cor(Smarket[,-9])#indexe la matrice (vire la colonne 9)
help(glm)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
#"Direction":variable expliquée
#~ sépare variable de réponse et prédicteurs
#+ sépare les prédicteurs
#data: données sur lesquelles ont éxécute la fonction
#family: type de modèle. "binomial" pour regression logistique
coef(glm.fit)
summary(glm.fit)$coef #isole le tableau d'estimations
summary(glm.fit)$coef[,4] #
contrasts (Smarcket [,9])
glm.probs=predict(glm.fit, type= "reponse")
q()
help(read.table)
date=read.table("C:/Users/util/Desktop/TD1/Type_1.csv",sep=";",row.names=1)
date=read.table("C:/Users/util/Desktop/TD1/Type_1.csv",sep=";",row.names=1)
date=read.table("C:/Users/util/Desktop/TD1/Type1_V.csv",sep=";",row.names=1)
head(date)
date=read.table("C:/Users/util/Desktop/TD1/Type1_V.csv",sep=";",row.names=1)
colnames(date)=LETTERS[1:3]
head(date)
help(plot)
help(plot)
help(plot)
attach(date)
plot(poids,longueur)
attach(date)
plot(A,B)
plot(A,B,main="plan formé par les variable A et B")
plot(A,B,main="plan formé par les variable A et B",xlab="poids",ylab="longueur")
dim(date)
plot(A,B,main="plan formé par les variable A et B",xlab="poids",ylab="longueur")
plot(A,B,main="plan formé par les variable A et B",xlab="poids",ylab="longueur")
plot(A,C,main="plan formé par les variable A et B",xlab="poids",ylab="longueur")
plot(B,C,main="plan formé par les variable A et B",xlab="poids",ylab="longueur")
q()
q()
library(caret)
library(ISLR)
library(tree)
attach(Carseats)
set.seed(1)
train = sample(1:nrow(Carseats),250)
train.d = Carseats[train,]
test.d = Carseats[-train,] # -train (pour les donnÃ©es numÃ©riques; ! pour les donnÃ©es boolÃ©ennes) = pour les donnÃ©es test
tree.carseats = tree(Sales~., data=Carseats, subset=train)
plot(tree.carseats)
text(tree.carseats,pretty=0) # pretty pour prendre le nom des variables qui sont dans le tableau de donnÃ©es
# Calcul de la RSS test
tree.pred = predict(tree.carseats, newdata = test.d)
rss = mean((Sales[-train]-tree.pred)^2)
rss
Sales
install.packages("rmarkdown")
install.packages("shiny")
install.packages("dashboard")
|:---------|:------------:|-------:|
|col 1 is  |left-aligned  |$1600   |
|col 2 is  |centered      |$12     |
|col 3 is  |right-aligned |$1      |
|  tables  |    are       |  cool  |
|  tables  |    are       |  cool  |
|:---------|:------------:|-------:|
|col 1 is  |left-aligned  |$1600   |
|col 2 is  |centered      |$12     |
|col 3 is  |right-aligned |$1      |
![ma belle tÃªte](*C:\Users\util\Pictures\Camera Roll\WIN_20190305_11_23_24_Pro.jpg){width=2cm}
library(shiny)
---
title: "Regression Lineaire"
author: "Canelia"
output:
html_document:
df_print: paged
word_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Nuage de points
```{r plot, echo=FALSE}
a=rnorm(1)
b=rnorm(1,2,1)
sigma_b=runif(1)
x=runif(100)
y=a*x+b+rnorm(100,0,sigma_b)
plot(x,y,type="p",main="Nuage de points")
```
## Correlation entre x et y
```{r pressure, echo=FALSE}
cor(x,y)
```
On prendra garde ÃƒÂ  ne consulter les sections suivantes que si le lien linÃƒÂ©aire est confirmÃƒÂ©.
## Regression lineaire de notre modele
```{r, echo=FALSE}
reg=lm(y~x)
summary(reg)
plot(x,y,type="p")
abline(reg)
```
## RÃ‚Â²
```{r, echo=FALSE}
r2=cor(x,y)^2
print(r2)
```
install.packages("rmarkdown")
install.packages("shiny")
install.packages("rmarkdown")
---
title: "Regression Lineaire"
author: "Canelia"
output:
html_document:
df_print: paged
word_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Nuage de points
```{r plot, echo=FALSE}
a=rnorm(1)
b=rnorm(1,2,1)
sigma_b=runif(1)
x=runif(100)
y=a*x+b+rnorm(100,0,sigma_b)
plot(x,y,type="p",main="Nuage de points")
```
## Correlation entre x et y
```{r pressure, echo=FALSE}
cor(x,y)
```
On prendra garde ÃƒÂ  ne consulter les sections suivantes que si le lien linÃƒÂ©aire est confirmÃƒÂ©.
## Regression lineaire de notre modele
```{r, echo=FALSE}
reg=lm(y~x)
summary(reg)
plot(x,y,type="p")
abline(reg)
```
## RÃ‚Â²
```{r, echo=FALSE}
r2=cor(x,y)^2
print(r2)
```
---
title: "Hello"
author: "PALMA"
date: "05/03/2019"
output: html_document
beamer_presenation:
colortheme: beaver
keep_tex: yes
slide_level: 3
theme: Montpellier
toc: yes
df_print: kable
runtime: shiny
---
| Tables | Are | Cool |
|:-------|:---:|-----:|
| col1   | lol | issou|
![Issou El Chancla](images/...){width=2cm}
**test en gras**
_test en italique_
```{r sim, comment=Ã¢Â€Â˜RÃƒÂ©sultat, prompt=TRUE}
a=runif(1,0,10); x=rexp(100,a); a.e=1/mean(x); a.e
```
```{r hist, fig.height=4, echo=FALSE}
plot(function(x) dexp(x,a),0,10,ylab="density")
hist(x,freq=FALSE,add=TRUE,col="green")
```
library(shiny)
runExample("01_hello")
install.packages("maps")
install.packages("mapproj")
install.packages("rmarkdown")
install.packages("shiny")
install.packages("dashboard")
#Pour utiliser des formats LATEX : Miktex / Texnic center
library(rmarkdown)
library(shiny)
#A installer quand j'aurai internet
install.packages("knitr")
install.packages("kableExtra")
install.packages("plotly")
install.packages("plot3D")
install.packages("sm")
library(knitr)
library(kableExtra)
#CHAPITRE 2 : SHINY
library(shiny)
runExample("01_hello")
knitr::opts_chunk$set(echo = FALSE)
library(shiny)
runExample("01_hello")
titlePanel(h3("Hello Shiny!"))
sidebarLayout(
sidebarPanel({sliderInput(inputId = "bins", label = "Number of bins:", min = 1, max = 50, value = 30)}),
mainPanel(
renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
}, outputArgs = list(width = "100%",height="250px"))
)
)
knitr::opts_chunk$set(echo = FALSE)
titlePanel(h3("Hello Shiny!"))
sidebarLayout(
sidebarPanel({sliderInput(inputId = "bins", label = "Number of bins:", min = 1, max = 50, value = 30)}),
mainPanel(
renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
}, outputArgs = list(width = "100%",height="250px"))
)
)
sidebarLayout(
sidebarPanel({dateInput(inputId = "Date", label = "Choisissez une date:")}),
mainPanel(
"dateInput(inputId = 'Date', label = 'Choisissez une date:')"
)
)
sidebarLayout(
sidebarPanel({dateRangeInput(inputId = "Date", label = "Choisissez une date:")}),
mainPanel("dateRangeInput(inputId = 'Date', label = 'Choisissez une date:')"
)
)
sidebarLayout(
sidebarPanel({selectInput(inputId='Menu', label='Faites votre choix', choices=c('Choix 1','Choix 2','Choix 3') ,multiple = TRUE, selected='Choix 1')}),
mainPanel(
"selectInput(inputId='Menu', label='Faites votre choix', choices=c('Choix 1','Choix 2','Choix 3') ,multiple = TRUE, selected='Choix 1')"
)
)
sidebarLayout(
sidebarPanel({radioButtons(inputId = 'Cases', label = 'Parcours univ.',choices=c('Lic.Maths', 'Lic.Eco') ,selected='Lic.Eco',inline=TRUE)}),
mainPanel(
"radioButtons(inputId = 'Cases', label = 'Parcours univ.',choices=c('Lic.Maths', 'Lic.Eco') ,selected='Lic.Eco',inline=TRUE)"
)
)
sidebarLayout(
sidebarPanel({checkboxInput(inputId = 'Case', label = 'Approuve',value=FALSE)}),
mainPanel(
"checkboxInput(inputId = 'Case', label = 'Approuve',value=FALSE)"
)
)
sidebarLayout(
sidebarPanel({checkboxGroupInput(inputId = 'Cases', label = 'Parcours univ.',c('Lic.Maths', 'Lic.Eco', 'Mast.ESA' ),selected='Mast.ESA')}),
mainPanel(
"checkboxGroupInput(inputId = 'Cases', label = 'Parcours univ.',c('Lic.Maths', 'Lic.Eco', 'Mast.ESA' ),selected='Mast.ESA')"
)
)
sidebarLayout(
sidebarPanel({fileInput(inputId='File_s', label='Faites votre choix', multiple = TRUE, buttonLabel = 'Parcourir...',
placeholder = 'Pas de fichier sÃ©lectionnÃ©')}),
mainPanel(
"fileInput(inputId='File_s', label='Faites votre choix', multiple = TRUE, buttonLabel = 'Parcourir...',
placeholder = 'Pas de fichier sÃ©lectionnÃ©')"
)
)
sidebarLayout(
sidebarPanel({textInput(inputId='Texte', label='Nom et PrÃ©nom',value='')}),
mainPanel(
"textInput(inputId='Texte', label='Nom et PrÃ©nom',value='')"
)
)
sidebarLayout(
sidebarPanel({helpText('Taper du texte dans le champ ci-dessus.')}),
mainPanel(
"helpText('Taper du texte dans le champ ci-dessus.')"
)
)
sidebarLayout(
sidebarPanel({numericInput(inputId='Per', label='PÃ©riode',value=pi)}),
mainPanel(
"numericInput(inputId='Per', label='PÃ©riode',value=pi)"
)
)
sidebarLayout(
sidebarPanel({sliderInput(inputId='n', label='Taille de l\'Ã©chantillon',min=1,max=1000,value=100,step=1)}),
mainPanel(
"sliderInput(inputId='n', label='Taille de l\'Ã©chantillon', min=1, max=1000, value=100, step=1)"
)
)
sidebarLayout(
sidebarPanel({sliderInput(inputId='Int', label='Intervalle selectionnÃ©',min=0,max=1,value=c(0.1,0.9),step=.01)}),
mainPanel(
"sliderInput(inputId='Int', label='Intervalle selectionnÃ©', min=0, max=1, value=c(0.1,0.9), step=.01)"
)
)
shinyApp(
ui =  basicPage(
sliderInput(inputId='n', label='Taille de l\'Ã©chantillon', min=1, max=1000, value=100,step=1),
submitButton(text='Mettre Ã  jour', icon=icon('arrow-alt-circle-right'), width='100%'),
verbatimTextOutput("value")
),
server = function(input, output) {
output$value <-renderPrint({input$n})
}
)
sidebarLayout(
sidebarPanel({dateInput(inputId = "Date", label = "Choisissez une date:")}),
mainPanel(
"dateInput(inputId = 'Date', label = 'Choisissez une date:')"
)
)
shiny::runApp('C:/Users/util/Desktop/SHINY/Chap2/Exemples-20190507/Reg2')
library(shiny)
library(shiny)
shinyUI(fluidPage(
titlePanel("Linear regression with R"),
sidebarLayout(
sidebarPanel(
selectInput(inputId='X_law', label='Faites votre choix pour la loi de X', choices=c('N(0,1)','Exp(1)','U(0,1)') ,multiple = FALSE, selected='N(0,1)'),
sliderInput("n","Sample size:",min = 1,max = 100,value = 30),
sliderInput("a","A:",min = -10,max = 10,value = 3),
sliderInput("b","B:",min = -10,max = 10,value = -3),
sliderInput("s","S:",min =0,max = 10,value =1,step= .01)
),
mainPanel(plotOutput("Scatterplot"))
)
))
source('F:/CT R/fichiers_shiny/ui2.R')
knitr::opts_chunk$set(echo = TRUE)
source('Traitement_Images.R')
load('Images.RData')
I=get(params$I)
knitr::opts_chunk$set(echo = TRUE)
source('Traitement_Images.R')
load('Images.RData')
I=get(params$I)
knitr::opts_chunk$set(echo = TRUE)
source('Traitement_Images.R')
load('Images.RData')
I=get(params$I)
source('Traitement_Images.R')
load('Images.RData')
I=get(params$I)
Show_Image(I)
Show_Image(I)
Show_Image(I)
shiny::runApp('C:/Users/util/Desktop/antoine.buvat/Traitement_Images/CT_2019')
data=read.table("C:/Users/util/Desktop/M2 ESA/Support Vector Machine/creditcard.csv",header = T)
data=read.table("C:/Users/util/Desktop/M2 ESA/Support Vector Machine/creditcard.csv",header = T,sep=",")
head(data)
shiny::runApp('GitHub/buvat_langevin_walter')
install.packages("DT")
install.packages("DT")
install.packages("DT")
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp()
