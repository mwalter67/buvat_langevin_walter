tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2("sigmoid", 10)
choix_svm2("sigmoid", 100)
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
summary(svm_essai)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(summary(svm_essai))
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print("Le nombre de vecteurs de support est:")
print(SV$svm_essai)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
svm_essai
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
svm_essai=svm(Class~. , data=data_essai, kernel="linear", type="C-classification")
svm_essai
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
svm_essai=svm(Class~. , data=data_essai, kernel="linear", type="C-classification")
svm_essai
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
err
svm_essai$SV
svm_essai$SV
svm_essai$SV
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print("Le nombre de vecteurs de support est:")
print(SV)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
}
choix_svm3("linear", 3, 0)
choix_svm2("linear", 3)
choix_svm3("linear", 3, 3)
choix_svm3("polynomial", 3, 3)
choix_svm3("polynomial", 3, 4)
choix_svm3("polynomial", 3, 5)
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=SV$svm_essai
print(vecsup)
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=svm_essai$SV
print(vecsup)
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=svm_essai$SV
print(vecsup[,1])
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=svm_essai$SV
print(vecsup)
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=svm_essai$SV
print(vecsup[,1])
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
}
choix_svm3("polynomial", 3, 3)
set.seed(1)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
shiny::runApp()
shiny::runApp()
rus=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(data)
set.seed(1)
choix_svm=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=rus, kernel=kernel, type="C-classification", cost=cout, degree=deg )
pred_essai=predict(svm_essai, rus)
tab=table(pred_essai,class)
err=mean(rus$Class!=pred_essai)*100
print(svm_essai)
print(tab)
}
set.seed(5)
rus=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(data)
set.seed(1)
set.seed(5)
svm_essai=svm(Class~. , data=rus, kernel="polynomial", type="C-classification", cost=1, degree=3 )
pred_essai=predict(svm_essai, rus)
tab=table(pred_essai,class)
tab=table(pred_essai,Class)
svm_essai=svm(Class~. , data=rus, kernel="polynomial", type="C-classification", cost=1, degree=3 )
pred_essai=predict(svm_essai, rus)
tab=table(pred_essai,Class)
err=mean(rus$Class!=pred_essai)*100
print(svm_essai)
print(tab)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
names(resample)
svm_resample=svm(Class~.,data=resample,type="C-classification", kernel="linear")
svm_resample
pred_essai=predict(svm_resample, resample)
table(pred_essai,Class)
runApp()
runApp()
runApp()
runApp()
set.seed(5)
svm_essai=svm(Class~. , data=rus, kernel="polynomial", type="C-classification", cost=1, degree=3 )
pred_essai=predict(svm_essai, rus)
tab=table(pred_essai,Class)
err=mean(rus$Class!=pred_essai)*100
print(svm_essai)
print(tab)
set.seed(5)
svm_essai=svm(Class~. , data=rus, kernel="sigmoid", type="C-classification", cost=1, degree=3 )
pred_essai=predict(svm_essai, rus)
tab=table(pred_essai,Class)
err=mean(rus$Class!=pred_essai)*100
print(svm_essai)
print(tab)
svm_resample=svm(Class~.,data=resample,type="C-classification", kernel="linear")
svm_resample
pred_essai=predict(svm_resample, resample)
table(pred_essai,Class)
svm_resample=svm(Class~.,data=resample,type="C-classification", kernel="polynomial")
svm_resample
pred_essai=predict(svm_resample, resample)
table(pred_essai,Class)
runApp()
library(data.table)
library(corrplot)
library(caret)
library(e1071)
library(ggplot2)
library(UBL)
#Importation de la table de donnÃ©es
data=fread("C:/Users/mikew/OneDrive/Documents/MASTER 2 ESA/S1/SVM/Projet SVM/creditcard.csv",sep=',')
head(data)
summary(data)
attach(data)
names(data)
library(unbalanced)
n=ncol(train)
set.seed(9876)
inTrain<-createDataPartition(data$Class, p = 0.7,list=FALSE)
train <-data[inTrain]  #377 Total Occurrences of Fraud
n=ncol(train)
output=train$Class
input=train[,-n]
input=train[,-31]
View(input)
View(input)
ubNCL(input,output)
NCL=ubNCL(input,output)
ncl_data=cbind(NCL$X,NCL$Y)
View(ncl_data)
View(ncl_data)
table(NCL$Class)
table(Class)
attach(ncl_data)
table(Class)
View(ncl_data)
View(ncl_data)
View(ncl_data)
library(UBL)
library(data.table)
library(corrplot)
library(caret)
library(e1071)
library(ggplot2)
library(UBL)
#Importation de la table de donnÃ©es
data=fread("C:/Users/mikew/OneDrive/Documents/MASTER 2 ESA/S1/SVM/Projet SVM/creditcard.csv",sep=',')
head(data)
summary(data)
attach(data)
names(data)
imp=ImpSampClassif(Class~., data, C.perc = "balanced")
imp=ImpSampClassif(Class~., data, C.perc = "balance")
View(imp)
set.seed(9876)
inTrain<-createDataPartition(data$Class, p = 0.7,list=FALSE)
train <-data[inTrain]  #377 Total Occurrences of Fraud
imp=ImpSampClassif(Class~., train, C.perc = "balance")
table(imp$Class)
imp=ImpSampClassif(Class~., train, C.perc = list(Class=0.3))
table(imp$Class)
imp=ImpSampClassif(Class~., train, C.perc = list(Class=1))
table(imp$Class)
data=fread("C:/Users/mikew/OneDrive/Documents/MASTER 2 ESA/S1/SVM/Projet SVM/creditcard.csv",sep=',')
head(data)
imp=ImpSampClassif(Class~., train, C.perc = "extreme")
table(imp$Class)
imp=ImpSampClassif(Class~., train, C.perc = "balance")
table(imp$Class)
NCLClassif(Class~., train, k=10)
tomek=TomekClassif(Class~., train)
cnn=CNNClassif(Class~~., train)
cnn=CNNClassif(Class~., train)
cnn=CNNClassif(Class~., train)
cnn=CNNClassif(Class~., train, Cl="smaller")
install.packages("NoiseFiltersR")
library(NoiseFiltersR)
enn=ENN(class~., train)
enn=ENN(class~., data=train, k=5)
enn=ENN(Class~., data=train, k=5)
library(unbalanced)
output<-train$Class
input<-ubIonosphere[ ,-31]
input<-train[ ,-31]
View(input)
data<-ubTomek(X=input, Y= output)
View(data)
View(data)
newData<-cbind(data$X, data$Y)
shiny::runApp()
#Test ifelse
library(e1071)
library(data.table)
library(ggplot2)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
}
choix_svm3("polynomial", 3, 3)
data=fread("C:/Users/mikew/OneDrive/Documents/MASTER 2 ESA/S1/SVM/Projet SVM/creditcard.csv",sep=',')
head(data)
attach(data)
names(data)
summary(data)
set.seed(1)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
choix_svm3
choix_svm3
choix_svm3("polynomial", 3, 3)
library(data.table)
library(shiny)
library(ggplot2)
library(e1071)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
names(resample)
choix_svm=function(kernel, cout, deg){
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel=kernel, type="C-classification", cost=cout, degree=deg )
pred_essai=predict(svm_resample, resample)
tab=table(pred_essai,Class)
err=mean(resample$Class!=pred_essai)*100
print(svm_resample)
print(tab)
}
choix_svm("sigmoid",3,0)
choix_svm=function(kernel, cout, deg){
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel=kernel, type="C-classification", cost=cout, degree=deg )
pred_essai=predict(svm_resample, resample)
tab=table(pred_essai,Class)
err=mean(resample$Class!=pred_essai)*100
print(svm_resample)
print(tab)
print(err)
}
choix_svm("sigmoid",3,0)
best_svm=tune.svm(Class~., data = resample, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
best_svm
best_svm$performances
View(best_svm)
best_svm=tune.svm(Class~., data = resample, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10), type="C-classification")
best_svm=tune.svm(Class~., data = resample, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
best_svm$performances
set.seed(2501)
best_svm=tune.svm(Class~., data = resample, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
best_svm$performances
svmfit = best_svm$best.model
table(trainset[,c("churn")], predict(svmfit))
table(resample[,c("churn")], predict(svmfit))
table(resample[,c("Class")], predict(svmfit))
table(svmfit,Class)
svmfit
View(svmfit)
pred_svm=predict(svmfit,resample)
table(pred_svm,Class)
table(pred_svm,Class)
svmfit = best_svm$best.model
svmfit
resample$Class[resample$Class==1]="Fraud"
View(resample)
View(resample)
resample$Class[resample$Class==0]="No Fraud"
choix_svm=function(kernel, cout, deg){
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel=kernel, type="C-classification", cost=cout, degree=deg )
pred_essai=predict(svm_resample, resample)
tab=table(pred_essai,Class)
err=mean(resample$Class!=pred_essai)*100
print(svm_resample)
print(tab)
print(err)
}
choix_svm("sigmoid",3,0)
set.seed(2501)
best_svm=tune.svm(Class~., data = resample, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
best_svm=tune(Class~., data = resample, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
best_svm=tune(Class~., data = resample, gamma = 10^-2, cost = 10^2, tunecontrol=tune.control(cross=10))
table(Class)
View(resample)
library(data.table)
library(shiny)
library(ggplot2)
library(e1071)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
names(resample)
resample$Class[resample$Class==1]="Fraud"
resample$Class[resample$Class==0]="No Fraud"
table(Class)
View(resample)
x=subset(resample, select=-Class)
y=Class
choix_svm=function(kernel, cout, deg){
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel=kernel, type="C-classification", cost=cout, degree=deg )
pred_essai=predict(svm_resample, resample)
tab=table(pred_essai,Class)
err=mean(resample$Class!=pred_essai)*100
print(svm_resample)
print(tab)
print(err)
}
choix_svm("sigmoid",3,0)
best_svm=tune(svm, train.x=x, train.y=y,
kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
best_svm$performances
best_svm=tune(svm, train.x=x, train.y=y, kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
best_svm$performances
best_svm=tune(svm, train.x=x, train.y=y, kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(0.1,.5,1,2)))
print(best_svm)
View(best_svm)
library(data.table)
library(shiny)
library(ggplot2)
library(e1071)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
names(resample)
resample$Class[resample$Class==1]="Fraud"
resample$Class[resample$Class==0]="No Fraud"
table(Class)
x=subset(resample, select=-Class)
y=Class
choix_svm=function(kernel, cout, deg){
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel=kernel, type="C-classification", cost=cout, degree=deg )
pred_essai=predict(svm_resample, resample)
tab=table(pred_essai,Class)
err=mean(resample$Class!=pred_essai)*100
print(svm_resample)
print(tab)
print(err)
}
choix_svm("sigmoid",3,0)
set.seed(2501)
best_svm=tune(svm, train.x=x, train.y=y, kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(0.1,.5,1,2)))
best_svm$performances
print(best_svm)
best_svm=tune(svm, train.x=x, train.y=y, kernel="radial", ranges=list(cost=10^(-1:1), gamma=c(0.1,.5,1,2)))
best_svm$performances
print(best_svm)
best_svm1=tune(svm, train.x=x, train.y=y, kernel="linear", ranges=list(cost=10^(-1:1), gamma=c(0.1,.5,1,2)))
best_svm1$performances
print(best_svm1)
svmfit = best_svm$best.model
svmfit
View(svmfit)
View(svmfit)
View(resample)
is.type(Class)
