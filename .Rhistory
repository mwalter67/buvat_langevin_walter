ggroc(list("ROC GLM"=roc_glm,call_roc_name2=roc_tree))
ggroc(list("ROC de la régression linéaire"=roc_glm,"ROC de l'arbre de classification"=roc_tree))
glm=glm(Class~.,family="binomial",data=resample)
glm
shiny::runApp('GitHub/buvat_langevin_walter')
roc_glm=roc(test$Class,glm_pred2)
roc_tree=roc(test2$Class2,tree.pred.roc)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
theme_minimal()+
labs(x="1-Spécificité",y="Sensitivité", linetype="Légende")+
scale_fill_discrete(name = "Titre")
roc_glm=roc(test$Class,glm_pred2, col="red")
roc_tree=roc(test2$Class2,tree.pred.roc, col="blue")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
theme_minimal()+
labs(x="1-Spécificité",y="Sensitivité", linetype="Légende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
ggtitle="titre essai"
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
ggtitle="titre essai"+
labs(x="1-Spécificité",y="Sensitivité", linetype="Légende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
ggtitle="titre essai"+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
ggtitle="titre essai"+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
theme_classic()+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
legacy.axes=T)+
theme_classic()+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
legacy.axes=T)+
theme_classic()+
ggtitle("Titre")+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
legacy.axes=T)+
ggtitle("Titre")+
labs(x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
roc_glm=roc(test$Class,glm_pred2, col="red")
roc_tree=roc(test2$Class2,tree.pred.roc, col="blue")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
labs(title="TItre",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
scale_fill_discrete(name = "Titre")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes="linetype",
color="red",
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype","color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
roc_glm=roc(test$Class,glm_pred2, col="red",auc = T)
roc_tree=roc(test2$Class2,tree.pred.roc, col="blue")
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype","color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
aes="color",
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype","color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité", linetype="Legende")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("color"),
legacy.axes=T)+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("color"),
legacy.axes=T)+
geom_segment(aes(x = 1, xend = 0, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("color"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
color=c("red","blue"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
color=c("red"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
#######TEST MAT CONF
set.seed(5)
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
scale_fill_manual(values = c("blue","red"))
ggroc(list("Courbe ROC de la régression logistique"=roc_glm,"Courbe ROC de l'arbre de classification"=roc_tree),
aes=c("linetype"),
legacy.axes=T)+
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1), color="grey", linetype="dashed")+
labs(title="Courbes ROC",x="1-Spécificité",y="Sensitivité",linetype="Legend")+
theme(legend.position = "bottom")+
scale_fill_manual(values = c("blue","red"))
library(pROC)
data(aSAH)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6")
rocobj2 <- lines.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600")
testobj <- roc.test(rocobj1, rocobj2)
text(50, 50, labels=paste("p-value =", format.pval(testobj$p.value)), adj=c(0, .5))
legend("bottomright", legend=c("S100B", "NDKA"), col=c("#1c61b6", "#008600"), lwd=2)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- lines.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600")
rocobj2 <- lines.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",print.auc=T)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- lines.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",print.auc=T)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
library(pROC)
data(aSAH)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
testobj <- roc.test(rocobj1, rocobj2)
text(50, 50, labels=paste("p-value =", format.pval(testobj$p.value)), adj=c(0, .5))
legend("bottomright", legend=c("S100B", "NDKA"), col=c("#1c61b6", "#008600"), lwd=2)
oc
data(aSAH)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T)
rocobj2 <- plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
rocobj1 <- plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
rocobj2 <- plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(aSAH$outcome, aSAH$s100,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("S100B", "NDKA"), col=c("#1c61b6", "#008600"), lwd=2)
plot.roc(roc-glm
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(roc-glm,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(roc_glm,
main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(roc_glm,main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
roc_glm=roc(test$Class,glm_pred2, col="red",auc = T)
roc_tree=roc(test2$Class2,tree.pred.roc, col="blue", auc=T)
plot.roc(roc_glm,main="Statistical comparison", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(aSAH$outcome, aSAH$ndka, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(roc_glm,main="Courbe ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
warnings()
plot.roc(test$Class,glm_pred2,main="Courbe ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,tree.pred.roc, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(test$Class,glm_pred2,main="Courbe ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,tree.pred.roc, percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("Regression logistique", "Arbre de classification"), col=c("#1c61b6", "#008600"), lwd=2)
plot.roc(test$Class,glm_pred2,main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,tree.pred.roc, percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("Regression logistique", "Arbre de classification"), col=c("#1c61b6", "#008600"), lwd=2)
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
library(shiny)
library(ggplot2)
library(e1071)
library(data.table)
library(pROC)
library(caret)
test=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_test.csv",sep=',')
attach(test)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
glmpred=function(){
glm_rus=glm(Class~.,family="binomial",data=resample)
glm_pred_prob=predict(glm_rus,newdata=test,type="response")
glm_pred=rep(0,nrow(test))
glm_pred[glm_pred_prob<=.5]=0
glm_pred[glm_pred_prob>.5]=1
return(glm_pred)
}
glmpred
glmpred()
glm_pred
runApp('GitHub/buvat_langevin_walter')
library(shiny)
library(ggplot2)
library(e1071)
library(data.table)
library(pROC)
library(caret)
test=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_test.csv",sep=',')
attach(test)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10)
pred_essai=predict(svm_resample, newdata=test)
glm_rus=glm(Class~.,family="binomial",data=resample)
glm_pred_prob=predict(glm_rus,newdata=test,type="response")
glm_pred=rep(0,nrow(test))
glm_pred[glm_pred_prob<=.5]=0
glm_pred[glm_pred_prob>.5]=1
plot.roc(test$Class,pred_essai,main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test$Class,glm_pred, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(test$Class,as.numeric(pred_essai),main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test$Class,glm_pred, percent=TRUE, col="#008600",add=T, print.auc=T)
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10)
pred_essai=predict(svm_resample, newdata=test)
Class2=ifelse(Class==0,"0:No fraud","1:Fraud")
resample2=data.frame(resample,Class2)
resample2=resample2[,-31]
Class2=ifelse(test$Class==0,"0:No fraud", "1:Fraud")
test2=data.frame(test,Class2)
test2=test2[,-31]
tree.rus=tree(Class2~.,resample2)
set.seed(2501)
tree.pred=predict(tree.rus,test2,type="class")
plot.roc(test$Class,as.numeric(pred_essai),main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,tree_pred, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(test2$Class2,tree.pred, percent=TRUE, col="#008600",add=T, print.auc=T)
plot.roc(test2$Class2,as.numeric(tree.pred), percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("SVM optimal", "Arbre de classification"), col=c("#1c61b6", "#008600"), lwd=2)
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10)
pred_essai=predict(svm_resample, newdata=test)
glm_rus=glm(Class~.,family="binomial",data=resample)
glm_pred_prob=predict(glm_rus,newdata=test,type="response")
glm_pred=rep(0,nrow(test))
glm_pred[glm_pred_prob<=.5]=0
glm_pred[glm_pred_prob>.5]=1
plot.roc(test$Class,as.numeric(pred_essai),main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test$Class,glm_pred, percent=TRUE, col="#008600",add=T, print.auc=T)
legend("bottomright", legend=c("SVM optimal", "Regression logistique"), col=c("#1c61b6", "#008600"), lwd=2)
set.seed(5)
svm_resample=svm(Class~. , data=resample, kernel="radial", type="C-classification", cost=10)
pred_essai=predict(svm_resample, newdata=test)
plot.roc(test$Class,as.numeric(pred_essai),main="Comparaison des courbes ROC", percent=TRUE, col="#1c61b6", print.auc=T,  print.auc.y=40)
plot.roc(test2$Class2,as.numeric(tree.pred), percent=TRUE, col="red",add=T, print.auc=T)
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp()
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp()
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
shiny::runApp('C:/Users/mikew/OneDrive/Bureau/buvat_langevin_walter')
runApp('C:/Users/mikew/OneDrive/Bureau/buvat_langevin_walter')
shiny::runApp('C:/Users/mikew/OneDrive/Bureau/buvat_langevin_walter')
runApp('C:/Users/mikew/OneDrive/Bureau/buvat_langevin_walter')
runApp('C:/Users/mikew/OneDrive/Bureau/buvat_langevin_walter')
runApp('C:/Users/mikew/OneDrive/Bureau/buvat_langevin_walter')
runApp('C:/Users/mikew/OneDrive/Bureau/buvat_langevin_walter')
runApp()
runApp('C:/Users/mikew/OneDrive/Bureau/buvat_langevin_walter')
shiny::runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
install.packages("png")
install.packages("png")
readPNG("/images/image1.png",package="PNG")
library(knitr)
library(png)
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
library(png)
readPNG("/images/image1.png",package="PNG")
library(png)
readPNG("/images/image1.png",package="png")
library(png)
readPNG("/images/image1.png",package="png")
library(png)
readPNG("/images/image1.png",package="png")
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
library(knitr)
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
library(png)
readPNG("/images/image1.png",package="png")
library(png)
readPNG("/images/image1.png",package="png")
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
library(knitr)
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
library(knitr)
library(png)
library(png)
readPNG("/images/image1.png",package="png")
library(png)
readPNG("/images/image1.png")
library(png)
readPNG("/images/image1.png")
library(png)
readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
library(knitr)
library(png)
readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
install.packages("grid")
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
library(knitr)
library(png)
library(grid)
img=readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
grid.raster(img)
img=readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
grid.raster(img)
img=readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
grid.raster(img)
img=readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
grid.raster(img)
img=readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image1.png")
grid.raster(img)
img2=readPNG("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/texte/images/image2.png")
grid.raster(img2)
install.packages("jpeg")
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
runApp('GitHub/buvat_langevin_walter')
