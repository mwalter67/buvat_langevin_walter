data=read.csv("C:/Users/mikew/OneDrive/Bureau/MASTER 2 ESA/S1/SVM/Projet SVM/creditcard.csv", header=T )
data=read.csv("C:/Users/mikew/OneDrive/Documents/MASTER 2 ESA/S1/SVM/Projet SVM/creditcard.csv", header=T )
#data=read.csv("C:/Users/util/Desktop/M2 ESA/Support Vector Machine/creditcard.csv", header=T )
head(data)
attach(data)
names(data)
set.seed(1)
train=sample(1:nrow(data),200000)
data_train=data[train,]
data_test=data[-train,]
table(data$Class)
fraud=data$Class==1
install.packages("e1071")
library(e1071)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
svm_essai=svm(Class~. , data=data_essai, kernel="linear")
svm_essai
pred_essai=predict(svm_essai, data_essai)
predessai=rep(0,10000)
predessai[pred_essai<0.5]=0
predessai[pred_essai>=0.5]=1
table(predessai,class_essai)
err=mean(data_essai$Class!=predessai)
err
err=mean(data_essai$Class!=predessai)*100
err
#Essai sur un petit Ã©chantillon sigmoid
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
svm_essai=svm(Class~. , data=data_essai, kernel="sigmoid")
svm_essai
pred_essai=predict(svm_essai, data_essai)
predessai=rep(0,10000)
predessai[pred_essai<0.5]=0
predessai[pred_essai>=0.5]=1
table(predessai,class_essai)
err=mean(data_essai$Class!=predessai)*100
err
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
svm_essai=svm(Class~. , data=data_essai, kernel="linear", type="C-classification")
svm_essai
pred_essai=predict(svm_essai, data_essai)
predessai=rep(0,10000)
predessai[pred_essai<0.5]=0
predessai[pred_essai=0]=0
predessai[pred_essai=1]=1
table(predessai,class_essai)
table(pred_essai,class_essai)
table(predessai,class_essai)
table(pred_essai,class_essai)
summary(pred_essai)
summary(class_essai)
table(class_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
err
svm_essai=svm(Class~. , data=data_essai, kernel="sigmoid" , type="C-classification")
svm_essai
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
err
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
svm_essai=svm(Class~. , data=data_essai, kernel="polynomial" , type="C-classification")
svm_essai
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
err
svm_essai=svm(Class~. , data=data_essai, kernel="radial basis" , type="C-classification")
svm_essai=svm(Class~. , data=data_essai, kernel="radial_basis" , type="C-classification")
svm_essai=svm(Class~. , data=data_essai, kernel="radial" , type="C-classification")
svm_essai
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
err
svm_essai=svm(Class~. , data=data_essai, kernel="radial" , type="C-classification", cost=3)
svm_essai
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
err
install.packages(c("mapproj", "maps"))
kernel="linear"
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
if (kernel="linear"){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
if (kernel=="linear"){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
err
set.seed(1)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
if (kernel=="linear"){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
err
set.seed(1000)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
if (kernel=="linear"){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
err
if (kernel=="linear"){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
tab
err
library(e1071)
library(e1071)
kernel="linear"
set.seed(1000)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
if (kernel=="linear"){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
tab
err
library(e1071)
kernel="linear"
set.seed(1000)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
if (kernel=="linear"){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
tab
err
choix_svm=function(kernel){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
choix_svm("kernel")
choix_svm("linear")
tab
err
choix_svm("sigmoid")
tab
err
choix_svm("polynomial")
tab
err
choix_svm=function(kernel){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
}
choix_svm("linear")
choix_svm=function(kernel){
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
choix_svm("linear")
choix_svm("linear")
tab
err
choix_svm("sigmoid")
tab
err
choix_svm("polynomial")
tab
err
choix_svm=function(kernel){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
}
choix_svm("linear")
tab
err
choix_svm("sigmoid")
tab
err
choix_svm=function(kernel){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(tab)
print(err)
}
choix_svm("sigmoid")
choix_svm("linear")
choix_svm("polynomial")
choix_svm("radial")
choix_svm=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(tab)
print(err)
}
choix_svm=function(kernel){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(tab)
print(err)
}
choix_svm=function(kernel){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification")
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(tab)
print(err)
}
choix_svm("sigmoid")
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2("sigmoid", 10)
choix_svm2("sigmoid", 100)
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
summary(svm_essai)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(summary(svm_essai))
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print("Le nombre de vecteurs de support est:")
print(SV$svm_essai)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
svm_essai
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
svm_essai=svm(Class~. , data=data_essai, kernel="linear", type="C-classification")
svm_essai
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
svm_essai=svm(Class~. , data=data_essai, kernel="linear", type="C-classification")
svm_essai
pred_essai=predict(svm_essai, data_essai)
table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
err
svm_essai$SV
svm_essai$SV
svm_essai$SV
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print("Le nombre de vecteurs de support est:")
print(SV)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm2=function(kernel, cout){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
}
choix_svm2("sigmoid", 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
}
choix_svm3("linear", 3, 0)
choix_svm2("linear", 3)
choix_svm3("linear", 3, 3)
choix_svm3("polynomial", 3, 3)
choix_svm3("polynomial", 3, 4)
choix_svm3("polynomial", 3, 5)
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=SV$svm_essai
print(vecsup)
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=svm_essai$SV
print(vecsup)
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=svm_essai$SV
print(vecsup[,1])
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=svm_essai$SV
print(vecsup)
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
vecsup=svm_essai$SV
print(vecsup[,1])
}
choix_svm3("polynomial", 3, 3)
choix_svm3=function(kernel, cout, deg){
set.seed(5)
svm_essai=svm(Class~. , data=data_essai, kernel=kernel, type="C-classification", cost=cout , degree=deg)
pred_essai=predict(svm_essai, data_essai)
tab=table(pred_essai,class_essai)
err=mean(data_essai$Class!=pred_essai)*100
print(svm_essai)
print(tab)
print(err)
}
choix_svm3("polynomial", 3, 3)
set.seed(1)
essai=sample(1:nrow(data),10000)
data_essai=data[essai,]
class_essai=Class[essai]
