shiny::runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
shiny::runApp('~/GitHub/buvat_langevin_walter')
library("e1071")
library("rgl")
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
library("e1071")
library("rgl")
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
library("e1071")
library("rgl")
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
rgl.open(useNULL=T)
scatter3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
rglwidget()
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
install.packages(shiny-rgl)
install.packages("shiny-rgl")
install.packages("shiny-rgl")
library("shiny-rgl")
install.packages("shiny-rgl")
library("shiny-rgl")
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
rgl.open(useNULL=T)
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
rglwidget()
knitr::opts_chunk$set(echo = TRUE, fig.align='center')
library(knitr)
library(rgl)
knit_hooks$set(webgl = hook_webgl)
library("e1071")
library("rgl")
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
library("e1071")
library("rgl")
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
rgl.open(useNULL=T)
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
rglwidget()
train <- iris
train$y <-ifelse(train[,5]=="setosa", 1, -1)
sv <- svm(y~Petal.Length+Petal.Width+Sepal.Length, data=train, kernel="linear", scale=FALSE, type="C-classification")
W <- rowSums(sapply(1:length(sv$coefs), function(i) sv$coefs[i]*sv$SV[i,]))
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, sub="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
rglwidget()
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, main="Un exemple dans un espace a 3 dimensions")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
rglwidget()
plot3d(train$Petal.Length, train$Petal.Width, train$Sepal.Length, ylab="", xlab="", zlab="", col= ifelse(train$y==-1,"red","blue"), size = 2, type='s', alpha = .6, main="Un exemple dans un espace a 3 dimensions")
rgl.bg(color = "white")
rgl.planes(a = W[1], b=W[2], c=W[3], d=-sv$rho, color="green", alpha=.4)
rglwidget()
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
runApp('~/GitHub/buvat_langevin_walter')
install.packages(c("bestglm", "randomForest"))
install.packages("ROCR")
library(data.table)
library(shiny)
library(ggplot2)
library(e1071)
library(ROCR)
library(pROC)
library(corrplot)
library(class)
test=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_test.csv",sep=',')
attach(test)
resample=fread("C:/Users/mikew/OneDrive/Documents/GitHub/buvat_langevin_walter/creditcard_rus.csv",sep=',')
attach(resample)
names(resample)
rus.cor=cor(resample)
errlist=vector()
cost=vector()
kernel=vector()
deg=vector()
auctab=vector()
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="linear", type="C-classification", cost=cout )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="polynomial", type="C-classification", cost=cout, degree=3 )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="polynomial", type="C-classification", cost=cout, degree=4 )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="polynomial", type="C-classification", cost=cout, degree=5 )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="radial", type="C-classification", cost=cout )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="sigmoid", type="C-classification", cost=cout )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
mat=as.data.frame(mat)
names(mat)=c("Kernel","Cout","Degré","Taux d'erreur","AUC")
attach(mat)
mat$Kernel[mat$Kernel==0]="Linéaire"
mat$Kernel[mat$Kernel==1]="Polynomial"
mat$Kernel[mat$Kernel==2]="Radial "
mat$Kernel[mat$Kernel==3]="Sigmoide"
mat
mat$Degré=as.character(mat$Degré)
if(mat$Kernel="Polynomial") mat$Degré="Non Pertinent"
if(mat$Kernel=="Polynomial") mat$Degré=="Non Pertinent"
if(mat$Kernel=="Polynomial") mat$Degré="Non Pertinent"
View(mat)
View(mat)
is.type(mat$Degré)
type(mat$Degré)
is.character(mat$Degré)
if(mat$Kernel=="Polynomial") {
mat$Degré="Non Pertinent"
}
if(mat$Kernel="Polynomial") {
mat$Degré="Non Pertinent"
}
if(mat$Kernel="Polynomial") {
mat$Degré="Non Pertinent"
}
if(mat$Kernel="Polynomial") {
mat$Degré="Non Pertinent"
}
mat$Degré="Non Pertinent"
if(mat$Kernel="Polynomial"){
mat$Degré="Non Pertinent"
}
if(mat$Kernel=="Polynomial"){
mat$Degré="Non Pertinent"
}
if(Kernel=="Polynomial"){
mat$Degré="Non Pertinent"
}
if(Kernel="Polynomial"){
mat$Degré="Non Pertinent"
}
mat$Degré[mat$Kernel=="Polynomial"]="Non pertinent"
mat
mat$Degré[mat$Kernel==1]="Non pertinent"
mat
errlist=vector()
cost=vector()
kernel=vector()
deg=vector()
auctab=vector()
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="linear", type="C-classification", cost=cout )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="polynomial", type="C-classification", cost=cout, degree=3 )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="polynomial", type="C-classification", cost=cout, degree=4 )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="polynomial", type="C-classification", cost=cout, degree=5 )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="radial", type="C-classification", cost=cout )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
for (cout in c(1,3,5,10)){
set.seed(5)
svm_resample=svm(Class~V1+V2+V3+V4+V5+V6+V7+V8+V9+V10+V11+V12+V14+V16+V17+V18+V19+V21 , data=resample, kernel="sigmoid", type="C-classification", cost=cout )
pred_essai=predict(svm_resample, newdata=test)
tab=table(pred_essai,test$Class)
err=mean(test$Class!=pred_essai)*100
prednum=as.numeric(pred_essai)
roc2=roc(test$Class,prednum)
auc2=roc2$auc
auctab=rbind(auctab,auc2)
kernel=rbind(kernel,svm_resample[["kernel"]])
cost=rbind(cost,svm_resample[["cost"]])
deg=rbind(deg,svm_resample[["degree"]])
errlist=rbind(errlist,err)
mat=cbind(kernel,cost,deg,errlist,auctab)
}
mat=as.data.frame(mat)
names(mat)=c("Kernel","Cout","Degré","Taux d'erreur","AUC")
attach(mat)
mat$Kernel[mat$Kernel==0]="Linéaire"
mat$Kernel[mat$Kernel==1]="Polynomial"
mat$Kernel[mat$Kernel==2]="Radial "
mat$Kernel[mat$Kernel==3]="Sigmoide"
mat$Degré=as.character(mat$Degré)
is.character(mat$Degré)
mat$Degré[mat$Kernel==1]="Non pertinent"
View(mat)
View(mat)
mat$Degré[mat$Kernel=="POlynomial"]="Non pertinent"
mat
mat$Degré[mat$Kernel=="POlynomial"]="Non pertinent"
if (Kernel="Polynomial"){
mat$Degré="NP"
}
if (Kernel=="Polynomial"){
mat$Degré="NP"
}
shiny::runApp('~/GitHub/buvat_langevin_walter')
